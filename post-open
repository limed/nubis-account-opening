#!/bin/bash
# Run this script after an account is created and you have created a bootstrap user

set -e

ACCOUNT_NAME=$1

function fail() {
    echo "$@"
    exit 1
}

function account_alias() {
    if [ -z "$1" ]; then echo "Usage: $FUNCNAME <account name>"; exit 1; fi

    local account_name=$1
    out=$(aws iam list-account-aliases --query AccountAliases --output text)

    if [  -z "${out}" ]; then
        echo "Creating account alias: ${account_name}"
        aws iam create-account-alias --account-alias "${account_name}"
    fi

}

function enforce_password_policy() {
    echo "Enforcing password policy"
    aws iam update-account-password-policy\
        --allow-users-to-change-password\
        --max-password-age 90\
        --minimum-password-length 16\
        --password-reuse-prevention 24
}

function delete_organization_role() {
    local ROLENAME="${1:-OrganizationAccountAccessRole}"
    org_role_arn=$(aws iam get-role --role-name OrganizationAccountAccessRole --query 'Role.Arn' --output text)
    if [ ! -z "${org_role_arn}" ]; then
        echo "Role ${ROLENAME} exists, deleting the role"
        role_policies=$(aws iam list-role-policies --role-name "${ROLENAME}" --query 'PolicyNames' --output text)
        aws iam delete-role-policy --role-name "${ROLENAME}" --policy-name "${role_policies}"
        aws iam delete-role --role-name "${ROLENAME}"
    fi
}

# NOTE: Assumes bootstrap username is nubis-bootstrap
# NOTE: also assumes your policy name admin
function create_inline_admin_policy() {
    local bootstrap_user="${1:-nubis-bootstrap}"
    local admin_policy_doc="{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":\"*\",\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"

    out=$(aws iam list-user-policies --user-name "${bootstrap_user}" --query PolicyNames --output text | grep "admin")
    if [ -z "${out}" ]; then
        echo "Creating inline policy for user: ${bootstrap_user}"
        aws iam put-user-policy --user-name "${bootstrap_user}" --policy-document "${admin_policy_doc}" --policy-name admin
    fi
}

# pre-req
hash aws 2>/dev/null || fail "Please install the AWS CLI API to use this tool. https://aws.amazon.com/cli/"

if [ -z "${ACCOUNT_NAME}" ]; then
    fail "Usage: $0 <account name>"
fi

if [ -z "${AWS_ACCESS_KEY_ID}" ] || [ -z "${AWS_SECRET_ACCESS_KEY}" ] || [ -z "${AWS_VAULT}" ]; then
    fail "AWS environment variables not set, you need to run aws-vault to get your credentials"
fi

account_alias "${ACCOUNT_NAME}"
enforce_password_policy
delete_organization_role
create_inline_admin_policy
